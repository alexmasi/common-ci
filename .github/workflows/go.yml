name: Common Go

on:
  workflow_call:
    inputs:
      race-tests-excludes-regex:
        type: string
      coverage-excludes-regex:
        type: string
      skip-race-tests:
        type: boolean

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go: ['1.19', '1.20', '1.x']

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
        id: go

      - name: Check out code
        uses: actions/checkout@v3

      - name: Get dependencies
        run: |
          go mod download

      - name: Go Mod should be tidy
        run: |
          go mod tidy
          diff -u <(echo -n) <(git diff)

      - name: Build packages
        run: go build -v ./...

      - name: Run coverage
        if: ${{ matrix.go == '1.x' }}
        run: |
          if [ -z "${{ inputs.coverage-excludes-regex }}" ]; then
            echo "Running for all packages"
            go test -v -coverprofile=profile.cov ./...
          else
            echo "Running for non-excluded packages"
            go test -v -coverprofile=profile.cov $(go list ./... | egrep -v ${{ inputs.coverage-excludes-regex }})
          fi

      - name: Install goveralls
        if: ${{ matrix.go == '1.x' }}
        run: go install github.com/mattn/goveralls@latest

      - name: Run Tests
        run: go test -v ./...

      - name: Run race tests
        if: ${{ !inputs.skip-race-tests }}
        run: |
          if [ -z "${{ inputs.race-tests-excludes-regex }}" ]; then
            echo "Running for all packages"
            go test -race -v ./...
          else
            echo "Running for non-excluded packages"
            go test -race -v $(go list ./... | egrep -v "${{ inputs.race-tests-excludes-regex }}")
          fi

  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: 1.x
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0
          args: --config=.github/linters/.golangci.yml

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the all caching functionality will be complete disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Lint Code Base
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_GO: false
          VALIDATE_HTML: false
          VALIDATE_KUBERNETES_KUBEVAL: false
          VALIDATE_JSCPD: false
          IGNORE_GENERATED_FILES: true
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
